pragma solidity >=0.4.22 <0.7.0;

contract UserAuthentication {
    //User credetials
    struct auth{
        address id;
        string name;
        string uPass;
        string question;
        string answer;   
    }
    mapping(string => auth) constrains;
    
    function delAuth(address id, string memory userName) public {
        require(msg.sender == id);
        delete constrains[userName];
    }
    
    function regiter(string memory userName, address id, string memory name, string memory pass, string memory que, string memory ans) public {
        constrains[userName].id = id;
        constrains[userName].name = name;
        constrains[userName].uPass = pass;
        constrains[userName].question = que;
        constrains[userName].answer = ans;
    }
    
    function authenticate(string memory userName, string memory pass) public view returns(address) {
        address s;
        if(keccak256(abi.encodePacked(pass)) == keccak256(abi.encodePacked(constrains[userName].uPass))) {
            s = constrains[userName].id;
        }
        return s;
    }
    
    function changePass(address id, string memory userName, string memory pass) public {
        require(msg.sender == id);
        constrains[userName].uPass = pass;
    }
    
    function forgrtPass(string memory userName, string memory que, string memory ans) public view returns(bool) {
        if(keccak256(abi.encodePacked(que)) == keccak256(abi.encodePacked(constrains[userName].question)) && 
        keccak256(abi.encodePacked(ans)) == keccak256(abi.encodePacked(constrains[userName].answer))) {
            return true;
        }
        else
            return false;
    }
}
