pragma solidity >=0.4.22 <0.7.0;

contract UserAuthentication {
    //User credetials
    struct auth{
        address id;
        string name;
        string uPass;
        string question;
        string answer;   
    }
    mapping(string => auth) constrains;
    
    function delAuth(address id, string memory userName) public {
        require(msg.sender == id);
        delete constrains[userName];
    }
    
    function regiter(string memory userName, address id, string memory name, string memory pass, string memory que, string memory ans) public {
        constrains[userName].id = id;
        constrains[userName].name = name;
        constrains[userName].uPass = pass;
        constrains[userName].question = que;
        constrains[userName].answer = ans;
    }
    
    function authenticate(string memory userName, string memory pass) public view returns(address) {
        address s;
        if(keccak256(abi.encodePacked(pass)) == keccak256(abi.encodePacked(constrains[userName].uPass))) {
            s = constrains[userName].id;
        }
        return s;
    }
    
    function changePass(address id, string memory userName, string memory pass) public {
        require(msg.sender == id);
        constrains[userName].uPass = pass;
    }
    
    function forgrtPass(string memory userName, string memory que, string memory ans) public view returns(bool) {
        if(keccak256(abi.encodePacked(que)) == keccak256(abi.encodePacked(constrains[userName].question)) && 
        keccak256(abi.encodePacked(ans)) == keccak256(abi.encodePacked(constrains[userName].answer))) {
            return true;
        }
        else
            return false;
    }
}

contract UserInformation {
    
    struct data{
        address uPhoto;
        string uName;   
    }
    
    mapping(string => data) Person;
    
    function getInfo(string memory userName)public view returns(address, string){
        return (Person[userName].uPhoto, Person[userName].uName);
    }
    
    function newUser(string memory userName, address id, address photo, string memory name)
    public {
        require(msg.sender == id);
        Person[userName].uPhoto = photo;
        Person[userName].uName = name;
    }
    
    function delUser(address id, string memory userName) public {
        require(msg.sender == id);
        delete Person[userName];
    }
    
    function setPhoto(address id, string memory userName, address photo) public {
        require(msg.sender == id);
        Person[userName].uPhoto = photo;
    }
    
    function setName(address id, string memory userName, string memory name) public {
        require(msg.sender == id);
        Person[userName].uName = name;
    }
}

contract Users{
    
    mapping(string => string) UList;
    
    function addUser(address id, string memory name, string memory userName) public {
        require(msg.sender == id);
        UList[name] = userName;
    }

    function delUser(address id, string memory name) public {
        require(msg.sender == id);
        delete UList[name];
    }
    
    function getUser(string memory name) public view returns(string){
        return UList[name];
    }
}

contract Container {
   
   string[] onlines;
   
   function join(string memory name){
       onlines.push(name);
   }
   
   function left(uint i){
       delete onlines[i];
   }
   
}

contract UserContents {
    
    struct chat {
        bool flag;
        address[] data;        
    }

    mapping(address => mapping(address => chat)) content;
    
    function transaction(address s, address r,bool f, address con) public {
        if(msg.sender == s || msg.sender == r){
        content[s][r].flag = f;
        content[s][r].data.push(con);
        }
    } 
    
    function getContent(address s, address r) public view returns (bool, address[] memory) {
        if(msg.sender == s || msg.sender == r){
            address[] memory dataT = content[s][r].data;
            return (content[s][r].flag, dataT);
        }
    }
    
    function delContent(address s, address r, uint id) public {
        if(msg.sender == s || msg.sender == r){
            delete content[s][r].data[id];
            delete content[s][r].flag;
        }
    }
}
