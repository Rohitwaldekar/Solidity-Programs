pragma solidity >=0.4.22 <0.7.0;

//To remove account, must delUser, remove UserInformation, remove authentication constrains

//Basically use To Find Perticular Friend
contract Users {
    //Map uName with uId
    mapping(string => address) public UList;
    //Must call by New User instance
    function addUser( address id, string memory name) public {
        require(msg.sender == id);
        UList[name] = id;
    }

    //Remove User
    //Must call by User instance
    function delUser(string memory name) public {
        require(msg.sender == UList[name]);
        delete UList[name];
    }
}


contract UserInformation {
    //Profile data
    struct data{
        address uPhoto;
        string uName;
        string uDOB;
        string uCity;
        string uCollege;   
    }
    
    mapping(address => data) public Person;
    
    //To get UserInfoby using use User contract
    
    function newUser(address id, address photo, string memory name, string memory dob, string memory city, string memory college)
    public {
        require(msg.sender == id);
        Person[id].uPhoto = photo;
        Person[id].uName = name;
        Person[id].uDOB = dob;
        Person[id].uCity = city;
        Person[id].uCollege = college;
    }
    
    function delUser(address id) public {
        require(msg.sender == id);
        delete Person[id];
    }
    
    function setPhoto(address id, address photo) public {
        require(msg.sender == id);
        Person[id].uPhoto = photo;
    }
    
    function setName(address id, string memory name) public {
        require(msg.sender == id);
        Person[id].uName = name;
    }
    
    function setDOB(address id, string memory dob) public {
        require(msg.sender == id);
        Person[id].uDOB = dob;   
    }
    
    function setCity(address id, string memory city) public {
        require(msg.sender == id);
        Person[id].uCity = city;
    }
    
    function setCollege(address id, string memory college) public {
        require(msg.sender == id);
        Person[id].uCollege = college;
    }
}


contract UserAuthentication {
    //User credetials
    struct auth{
        string uName;
        string uPass;
        string question;
        string answer;   
    }
    mapping(address => auth) constrains;
    
    function delAuth(address id) public {
        require(msg.sender == id);
        delete constrains[id];
    }
    
    function regiter(address id, string memory name, string memory pass, string memory que, string memory ans) public {
        require(msg.sender == id);
        constrains[id].uName = name;
        constrains[id].uPass = pass;
        constrains[id].question = que;
        constrains[id].answer = ans;
    }
    
    function authenticate(address id, string memory name, string memory pass) public view returns(bool) {
        require(msg.sender == id);
        if(keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked(constrains[id].uName)) && 
        keccak256(abi.encodePacked(pass)) == keccak256(abi.encodePacked(constrains[id].uPass))) {
            return true;
        }
        else
            return false;
    }
    
    function changePass(address id, string memory pass) public {
        require(msg.sender == id);
        constrains[id].uPass = pass;
    }
    
    function forgrtPass(address id, string memory que, string memory ans) public view returns(bool) {
        require(msg.sender == id);
        if(keccak256(abi.encodePacked(que)) == keccak256(abi.encodePacked(constrains[id].question)) && 
        keccak256(abi.encodePacked(ans)) == keccak256(abi.encodePacked(constrains[id].answer))) {
            return true;
        }
        else
            return false;
    }
}


contract UserContents {
    //date input
    struct chat {
        uint[] index;
        string[] date;
        address[] data;        
    }

    mapping(address => mapping(address => chat)) content;
    
    function transaction(address s, address r, string memory dat, address con) public {
        uint v = content[s][r].date.length;
        content[s][r].index.push(v);
        content[s][r].date.push(dat);
        content[s][r].data.push(con);
    }
    //Testing Function
    function getindex(address s, address r)public view returns(uint){
        return content[s][r].date.length; 
    }
    
    //Get content
    function getContent(address s, address r) public returns (uint[] memory, string[] memory, address[] memory) {
        uint[] memory indexT = content[s][r].index;
        string[] memory dateT = content[s][r].date;
        address[] memory dataT = content[s][r].data;
        return (indexT, dateT, dataT);
    }
    
    function delContent(address s, address r, uint id) public {
        delete content[s][r].date[id]; 
        delete content[s][r].data[id];
        delete content[s][r].index[id];
    }
}


contract UserFriends {
    //User Friends
    struct data{
        mapping(string => address) fri;    
    }
    
    mapping(address => data) MyFri;
    mapping(address => data) ReqFri;
    mapping(address => data) SedFri;
    //Fri Handling
    function delMyFri(address id, string memory name) public {
        delete MyFri[id].fri[name];
    }
    
    function addMyFri(address id, string memory name, address add) public {
        MyFri[id].fri[name] = add;
    }
    ///Req Handling
    function acceptReqFri(address id, string memory name, address add) public {
        addMyFri(id, name, add);
    }
    
    function rejectReqFri(address id, string memory name) public {
        delete ReqFri[id].fri[name];   
    }
    //Sed Req Handling
    function canSendFri(address id, string memory name) public {
        delete SedFri[id].fri[name];
    }
    
    function addSendFri(address id, string memory name, address add) public {
        SedFri[id].fri[name] = add;
    }
}

contract UserInformation {
    //Profile data
    struct data{
        address uPhoto;
        string uName;
    }
    
    mapping(address => data) public Person;
    
    //To get UserInfoby using use User contract
    
    function newUser(address id, address photo, string memory name)
    public {
        require(msg.sender == id);
        Person[id].uPhoto = photo;
        Person[id].uName = name;
    }
    
    function delUser(address id) public {
        require(msg.sender == id);
        delete Person[id];
    }
    
    function setPhoto(address id, address photo) public {
        require(msg.sender == id);
        Person[id].uPhoto = photo;
    }
    
    function setName(address id, string memory name) public {
        require(msg.sender == id);
        Person[id].uName = name;
    }
}
