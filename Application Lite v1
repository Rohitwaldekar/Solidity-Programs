pragma solidity >=0.4.22 <0.7.0;

//Basically use To Find Perticular Friend
contract Users {
    //Map uName with uId
    mapping(string => address) uList;
    
    function addUser(string memory name, address id) public {
        uList[name] = id;
    }
    
    function getUser(string memory name) public returns(address) {
        return uList[name];
    }
    //Remove User
    function delUSer(string memory name) public {
        delete uList[name];
    }
}


contract UserInformation {
    //Profile data
    address private uId;
    struct data{
        address uPhoto;
        string uName;
        string uDOB;
        string uCity;
        string uCollege;   
    }
    mapping(address => data) public Person;
    
    constructor(address id, address photo, address status, bool sex, string memory name, string memory dob, string memory city, string memory college) public {
        //Person ob = Person[id];
        
        Person[id].uPhoto = photo;
        Person[id].uName = name;
        Person[id].uDOB = dob;
        Person[id].uCity = city;
        Person[id].uCollege = college;
    }
    
    /*function getUserInformation(address id) public returns(data memory) {
        //return (uId, uPhoto, uName, uDOB, uCity, uCollege);
        return Person[id];
    }*/
    
    function setPhoto(address id, address photo) public {
        Person[id].uPhoto = photo;
    }
    
    function setName(address id, string memory name) public {
        Person[id].uName = name;
    }
    
    function setDOB(address id, string memory dob) public {
        Person[id].uDOB = dob;   
    }
    
    function setCity(address id, string memory city) public {
        Person[id].uCity = city;
    }
    
    function setCollege(address id, string memory college) public {
        Person[id].uCollege = college;
    }
    
    function getPhoto(address id) public returns(address) {
        return Person[id].uPhoto;
    }
    
    function getName(address id) public returns(string memory) {
        return Person[id].uName;
    }
    
    function getDOB(address id) public returns(string memory) {
        return Person[id].uDOB;   
    }
    
    function getCity(address id) public returns(string memory) {
        return Person[id].uCity;
    }
    
    function getCollege(address id) public returns(string memory) {
        return Person[id].uCollege;
    }
}


contract UserAuthentication {
    //User credetials
    string private uName;
    string private uPass;
    address private uId;
    string private question;
    string private answer;
    
    function regiter(string memory name, string memory pass, address id, string memory que, string memory ans) public {
        uName = name;
        uPass = pass;
        uId = id;
        question = que;
        answer = ans;
    }
    
    function authenticate(string memory name, string memory pass) public returns(bool) {
        if(keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked(uName)) && keccak256(abi.encodePacked(pass)) == keccak256(abi.encodePacked(uPass))) {
            return true;
        }
        else
            return false;
    }
    
    function changePass(string memory pass) public {
        uPass = pass;
    }
    
    function forgrtPass(string memory que, string memory ans) public returns(bool) {
        if(keccak256(abi.encodePacked(que)) == keccak256(abi.encodePacked(question)) && keccak256(abi.encodePacked(ans)) == keccak256(abi.encodePacked(answer))) {
            return true;
        }
        else
            return false;
    }
}


contract UserContents {
    //User Media data
    address private sId;
    address private rId;
    address private contentId;
    string private dateAndTime;
    
    function trasation(address s, address r, address content, string memory dat) public {
        sId = s;
        rId = r;
        contentId = content;
        dateAndTime = dat;
    }
    //Get content
    function getContent() public {
        
    }
}


contract UserFriends {
    //User Friends
    struct data{
        mapping(string => address) fri;    
    }
    
    mapping(address => data) MyFri;
    mapping(address => data) ReqFri;
    mapping(address => data) SedFri;
    //Fri Handling
    function delMyFri(address id, string memory name) public {
        delete MyFri[id].fri[name];
    }
    
    function addMyFri(address id, string memory name, address add) public {
        MyFri[id].fri[name] = add;
    }
    ///Req Handling
    function acceptReqFri(address id, string memory name, address add) public {
        addMyFri(id, name, add);
    }
    
    function rejectReqFri(address id, string memory name) public {
        delete ReqFri[id].fri[name];   
    }
    //Sed Req Handling
    function canSendFri(address id, string memory name) public {
        delete SedFri[id].fri[name];
    }
    
    function addSendFri(address id, string memory name, address add) public {
        SedFri[id].fri[name] = add;
    }
}
  
